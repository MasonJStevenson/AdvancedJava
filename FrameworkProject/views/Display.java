package views;

import javax.swing.JPanel;

import java.awt.Dimension;
import java.awt.CardLayout;

import javax.swing.BorderFactory;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextPane;

import java.awt.Color;
import java.awt.Font;
import java.awt.FlowLayout;

import javax.swing.BoxLayout;
import javax.swing.border.LineBorder;

import java.awt.Insets;

/**
 * The display view for the calculator gui.
 * @author MasonS
 * @version 1.0
 */
public class Display extends JPanel
{
    private CalcScreen screen;
    private JPanel canvas;
    
    public static final String kTextView = "text";
    public static final String kDrawView = "draw";
    
    /**
     * Constructor for display.
     */
    public Display() 
    {
        //AUTO GENERATED BY WINDOWBUILDER PRO FOR ECLIPSE
        setBackground(new Color(255, 255, 255));
        setPreferredSize(new Dimension(496, 600));
        setLayout(new CardLayout(0, 0));
        
        JScrollPane textView = new JScrollPane();
        textView.setBackground(new Color(255, 255, 255));
        add(textView, kTextView);
        
        screen = new CalcScreen();
        screen.setBorder(BorderFactory.createCompoundBorder(new LineBorder(
                new Color(0, 0, 0), 2, true), BorderFactory.createEmptyBorder(
                        20, 20, 20, 20)));
        screen.setEnabled(false);
        screen.setEditable(false);
        screen.setSelectionColor(new Color(255, 255, 255));
        screen.setDisabledTextColor(new Color(0, 0, 0));
        screen.setBackground(new Color(245, 245, 245));
        screen.setFont(new Font("Lucida Console", Font.PLAIN, 14));
        screen.setHighlighter(null);
        textView.setViewportView(screen);
        
        JScrollPane drawView = new JScrollPane();
        add(drawView, kDrawView);
        
        canvas = new JPanel();
        canvas.setBorder(new LineBorder(new Color(0, 0, 0), 2, true));
        canvas.setBackground(Color.WHITE);
        drawView.setViewportView(canvas);
        canvas.setLayout(new BoxLayout(canvas, BoxLayout.X_AXIS));
    }
    
    /**
     * Returns the screen. (text view)
     * @return Returns the screen.
     */
    public CalcScreen getScreen()
    {
        return screen;
    }
    
    /**
     * Returns the canvas. (draw view)
     * @return Returns the canvas.
     */
    public JPanel getCanvas()
    {
        return canvas;
    }
    
    /**
     * Switches between text and draw views.
     * @param view The desired view.
     */
    public void switchView(String view)
    {
        CardLayout layout = (CardLayout) this.getLayout();
        
        //check for valid view
        if (view.equals(kTextView) || view.equals(kDrawView))
        {
            layout.show(this, view);
            this.updateUI();
        }
    }
}


